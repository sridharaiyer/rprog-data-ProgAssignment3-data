install.packages("swirl")
library(swirl)
swirl()
5+7
x<5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.4)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls
ls()
x <- 9
ls()
dir()
>list.files()
?list.files
args(list.files)
old.dir <- getwd()
quit()
swirl()
install.packages("swirl")
packageVersion("swirl")
library(swirl)
swirl()
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE).
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
> 8 || 6 != 8 && 4 > 3.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
bye()
q()
library("swirl")
swirl()
Sys.Date()
mean(c(2,3,4))
mean(c(2,4,5))
submit()
boring_function(4)
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd(c(1.4,3.6,7.9,8.8)))
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Namaste")
submit()
mad_libs(noun="Ganesh", adjective="Proud", place="Mysore")
submit()
submit()
'Hello' %p% 'student!'
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
q
q()
rnorm(10)
x<-1:4
lapply(x, runif)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
lapply(x, function(e) e[,1])
source('~/Documents/Projects/R_Projects/Course_2/corr.R')
x <- list(a = 1:4, b=rnorm(10), c=rnorm((20,1), d=rnorm(100,5)))
x <- list(a = 1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
x
lapply(x, mean)
sapply(x, mean)
mean(sapply(x, mean))
x <- matrix(1:5, 2, 3)
x <- matrix(1:6, 3, 2)
x
apply(x, 2, sum)
apply(x, 1, sum)
rowsum(x)
rowSums(x)
source('~/Documents/Projects/R_Projects/Course_2/corr.R')
library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply(list, function)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5,
| 5, 5, 6, 6))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapp
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$landmass, flags$population,summary)
tapply(flags$population, flags$landmass summary)
tapply(flags$population, flags$landmass, summary)
q()
x
remove(x)
x
y
ln(y-x)
lm(y-x)
traceback()
debug(lm)
lm(y-x)
q
library(datasets)
data("iris")
?iris
head(iris)
mean(iris$Sepal.Length)
rowMeans(iris[,1:4])
rm <- rowMeans(iris[,1:4])
clzass(rm)
class(rm)
apply(iris[,1:4], 2, mean)
row_app <- apply(iris[,1:4], 2, mean)
class(row_app)
row_app <- apply(iris[,1:4], 1, mean)
row_app
apply(iris[,1:4], 1, mean)
data("mtcars")
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
head(mtcars)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean_hp_by_cyl <- with(mtcars, tapply(hp, cyl, mean))
mean_hp_by_cyl
mean_hp_by_cyl[[4]]
mean_hp_by_cyl[["4"]]
mean_hp_by_cyl[["8"]] - mean_hp_by_cyl[["4"]]
debug(ls)
ls
ls
ls
exit
q
q
q
undebug(ls)
q
undebug(ls)
undebug()
undebug(ls)
system.time(readLines("http://www.jhsph.edu"))
q()
set.seed(1)
rpois(5, 2)
rep(0:1, each = 5)
system.time()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head()
head(plants, 10
)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
rbinom(1, size = 100, prob = 0.7)
rbinom(100, size = 1, prob = 0.7)
flipos2 <- rbinom(100, size = 1, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(100, 25)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, mean(10))
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
q()
library("swirl")
swirl()
data(cars)
?cars
head()
head(cars)
plot(cars)
?plot
plot(cars, x, y)
plot(x = cars$speed, y = cars$dist)
plot(cars)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, col = 2, xlim = c(10, 15))
plot(cars, xlim = c(10, 15))
plot(cars, col = 2, pch = 2)
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
dim(mtcars)
help("boxplot")
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
q()
getwd()
setwd
setwd("Documents/Projects/R_Projects/Course-4/rprog-data-ProgAssignment3-data/")
library("stringr")
outcome <- data.table::fread('outcome-of-care-measures.csv')
library("data.table")
install.packages("data.table")
library("data.table")
version
remove.packages("data.table")
install.packages("data.table", type = "source",
repos = "https://Rdatatable.gitlab.io/data.table")
install.packages("data.table", type = "source", repos = "https://Rdatatable.gitlab.io/data.table")
q()
